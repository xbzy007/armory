#!/usr/bin/env python
# _*_  coding:utf8  _*_
# 2017-11-15@by xbzy007

import sys, os, json
import subprocess
import threading
from time import ctime, sleep
import socket


class ConnectMySQL(object):
    def __init__(self, DBHOST, DBPORT, DBUSER, DBPSSWD, DBNAME):
        self.DBHOST = DBHOST
        self.DBPORT = DBPORT
        self.DBUSER = DBUSER
        self.DBPSSWD = DBPSSWD
        self.DBNAME = DBNAME

    def connectmysql(self):
        conn = MySQLdb.connect(host=self.DBHOST, user=self.DBUSER, passwd=self.DBPSSWD, db=self.DBNAME, charset="utf8")
        return conn

    def query(self, sqlString):
        conn = self.connectmysql()
        cursor = conn.cursor()
        cursor.execute(sqlString)
        returnData = cursor.fetchall()
        cursor.close()
        conn.close()
        return returnData



def createsoket():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    return s

class HandleData(object):

    def runtask(self):
        currentdir = os.path.dirname(os.path.realpath(__file__))
        # output = os.popen('cd %s && bash sysCheck.sh' % currentdir)
        # returnCode = subprocess.call("ls -lh",shell=True)
        # returnCode = subprocess.call("cd %s && bash sysCheck.sh" %currentdir,shell=True)
        p = subprocess.Popen("cd %s && bash SysBenchmark.sh" % currentdir, shell=True, stdout=subprocess.PIPE,
                             stderr=subprocess.STDOUT)
        p.wait()
        print 'run  benchmark end'
    
    
    ## 获取本机的IP
    def gethostip(self):
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s.connect(('118.8.8.8', 80))
            ip = s.getsockname()[0]
        finally:
            s.close()
    
        return ip
    
    def getmachinemodel(self,ip):
        sql = "select setName from machine_info where ip='%s'" % ip
        conndb = ConnectMySQL('10.93.86.4', 3306, 'readonly', 'readonly', 'cmdb_asset')
        data = conndb.query(sql)
        data = data[0][0].encode('utf-8') 
        return data
    
    def readdata(self):
           



    def senddata(self, runtimes, host, port):
        global hadruntimes
        ip = gethostip()
    
        for i in range(0, runtimes):
            # runtask()
            sleep(30)
            ######## 建立连接，发送数据给服务端,发送运行次数
            hadruntimes = hadruntimes + 1
            print "------------  hadruntimes : %s" % hadruntimes
            resdict['hadruntimes'] = hadruntimes
            print resdict
            data = json.dumps(resdict)
            ds = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            try:
                ds.connect((host, port))
                ds.sendall(data)
                sleep(10)
            except:
                print 'data connect fail!'
                sleep(5)
    

def send_hart(host, port, delay):
    global hadruntimes
    global clien_id
    hostname = socket.gethostname()
    hostip = socket.gethostbyname(hostname)
    clien_id = hostip.replace('.', '-')
    data = clien_id
    print data
    while True:
        print "check, %s report to server " % clien_id
        if not TData.isAlive():
            print "process done, will to exit"
            sys.exit(0)
        else:
            # try:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.connect((host, port))
            s.sendall(data)
            sleep(delay)
            # except:
            #    print ' heart connect fail!'
            #    sleep(delay)


# runtask()
# getdata(filename)


if __name__ == '__main__':
    filename = "000_summary.txt"
    host = sys.argv[1]
    hadruntimes = 0
    port = 8888
    hport = 8889
    runtimes = 2
    clien_id = 0  # 客户端注册id
    threads = []
    TData = threading.Thread(target=getdata, args=(filename, runtimes, host, port))
    threads.append(TData)
    THeartbeat = threading.Thread(target=send_hart, args=(host, hport, 5))
    threads.append(THeartbeat)
    for t in threads:
        t.setDaemon(True)
        t.start()
    t.join()
    print "all over %s" % ctime()
